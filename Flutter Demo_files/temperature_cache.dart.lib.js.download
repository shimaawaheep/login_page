// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.5.3 (stable) (Wed Sep 11 16:22:47 2024 +0000) on "windows_x64"
// Module: packages/material_color_utilities/temperature/temperature_cache.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/utils/math_utils.dart', 'packages/material_color_utilities/hct/hct.dart', 'packages/material_color_utilities/utils/color_utils.dart'], (function load__packages__material_color_utilities__temperature__temperature_cache_dart(dart_sdk, packages__material_color_utilities__utils__math_utils$46dart, packages__material_color_utilities__hct__hct$46dart, packages__material_color_utilities__utils__color_utils$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const math_utils = packages__material_color_utilities__utils__math_utils$46dart.utils__math_utils;
  const hct = packages__material_color_utilities__hct__hct$46dart.hct__hct;
  const color_utils = packages__material_color_utilities__utils__color_utils$46dart.utils__color_utils;
  var temperature_cache = Object.create(dart.library);
  var $last = dartx.last;
  var $first = dartx.first;
  var $round = dartx.round;
  var $_get = dartx._get;
  var $abs = dartx.abs;
  var $length = dartx.length;
  var $add = dartx.add;
  var $floor = dartx.floor;
  var $modulo = dartx['%'];
  var $insert = dartx.insert;
  var $isNotEmpty = dartx.isNotEmpty;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    Hct: () => (T.Hct = dart.constFn(dart_rti.findType("material_color_utilities__hct__hct|Hct")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    HctAndHctToint: () => (T.HctAndHctToint = dart.constFn(dart_rti.findType("core|int(material_color_utilities__hct__hct|Hct,material_color_utilities__hct__hct|Hct)")))(),
    __ToListOfHct: () => (T.__ToListOfHct = dart.constFn(dart_rti.findType("core|List<material_color_utilities__hct__hct|Hct>({count:core|int,divisions:core|int})")))(),
    HctTodouble: () => (T.HctTodouble = dart.constFn(dart_rti.findType("core|double(material_color_utilities__hct__hct|Hct)")))(),
    ListOfHct: () => (T.ListOfHct = dart.constFn(dart_rti.findType("core|List<material_color_utilities__hct__hct|Hct>")))(),
    MapOfHct$double: () => (T.MapOfHct$double = dart.constFn(dart_rti.findType("core|Map<material_color_utilities__hct__hct|Hct,core|double>")))(),
    __Tobool: () => (T.__Tobool = dart.constFn(dart_rti.findType("core|bool({a!core|double,angle!core|double,b!core|double})")))(),
    HctN: () => (T.HctN = dart.constFn(dart_rti.findType("material_color_utilities__hct__hct|Hct?")))()
  };
  var G = {
    JSArrayOfHct: () => (G.JSArrayOfHct = dart.constFn(_interceptors.JSArray$(T.Hct())))(),
    LinkedMapOfHct$double: () => (G.LinkedMapOfHct$double = dart.constFn(_js_helper.LinkedMap$(T.Hct(), T.double())))(),
    ListOfHct: () => (G.ListOfHct = dart.constFn(core.List$(T.Hct())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:material_color_utilities/temperature/temperature_cache.dart",
    "package:material_color_utilities/hct/hct.dart",
    "dart:core"
  ];
  var input$ = dart.privateName(temperature_cache, "TemperatureCache.input");
  var _hctsByTemp = dart.privateName(temperature_cache, "_hctsByTemp");
  var _hctsByHue = dart.privateName(temperature_cache, "_hctsByHue");
  var _tempsByHct = dart.privateName(temperature_cache, "_tempsByHct");
  var _inputRelativeTemperature = dart.privateName(temperature_cache, "_inputRelativeTemperature");
  var _complement = dart.privateName(temperature_cache, "_complement");
  temperature_cache.TemperatureCache = class TemperatureCache extends core.Object {
    get input() {
      return this[input$];
    }
    set input(value) {
      super.input = value;
    }
    static ['_#new#tearOff'](input) {
      return new temperature_cache.TemperatureCache.new(input);
    }
    get warmest() {
      return this.hctsByTemp[$last];
    }
    get coldest() {
      return this.hctsByTemp[$first];
    }
    analogous(opts) {
      let count = opts && 'count' in opts ? opts.count : 5;
      let divisions = opts && 'divisions' in opts ? opts.divisions : 12;
      let startHue = this.input.hue[$round]();
      let startHct = this.hctsByHue[$_get](startHue);
      let lastTemp = this.relativeTemperature(startHct);
      let allColors = G.JSArrayOfHct().of([startHct]);
      let absoluteTotalTempDelta = 0.0;
      for (let i = 0; i < 360; i = i + 1) {
        let hue = math_utils.MathUtils.sanitizeDegreesInt(startHue + i);
        let hct = this.hctsByHue[$_get](hue);
        let temp = this.relativeTemperature(hct);
        let tempDelta = (temp - lastTemp)[$abs]();
        lastTemp = temp;
        absoluteTotalTempDelta = absoluteTotalTempDelta + tempDelta;
      }
      let hueAddend = 1;
      let tempStep = absoluteTotalTempDelta / divisions;
      let totalTempDelta = 0.0;
      lastTemp = this.relativeTemperature(startHct);
      while (allColors[$length] < divisions) {
        let hue = math_utils.MathUtils.sanitizeDegreesInt(startHue + hueAddend);
        let hct = this.hctsByHue[$_get](hue);
        let temp = this.relativeTemperature(hct);
        let tempDelta = (temp - lastTemp)[$abs]();
        totalTempDelta = totalTempDelta + tempDelta;
        let desiredTotalTempDeltaForIndex = allColors[$length] * tempStep;
        let indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;
        let indexAddend = 1;
        while (indexSatisfied && allColors[$length] < divisions) {
          allColors[$add](hct);
          let desiredTotalTempDeltaForIndex = (allColors[$length] + indexAddend) * tempStep;
          indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;
          indexAddend = indexAddend + 1;
        }
        lastTemp = temp;
        hueAddend = hueAddend + 1;
        if (hueAddend > 360) {
          while (allColors[$length] < divisions) {
            allColors[$add](hct);
          }
          break;
        }
      }
      let answers = G.JSArrayOfHct().of([this.input]);
      let increaseHueCount = ((count - 1) / 2.0)[$floor]();
      for (let i = 1; i < increaseHueCount + 1; i = i + 1) {
        let index = 0 - i;
        while (index < 0) {
          index = allColors[$length] + index;
        }
        if (index >= allColors[$length]) {
          index = index[$modulo](allColors[$length]);
        }
        answers[$insert](0, allColors[$_get](index));
      }
      let decreaseHueCount = count - increaseHueCount - 1;
      for (let i = 1; i < decreaseHueCount + 1; i = i + 1) {
        let index = i;
        while (index < 0) {
          index = allColors[$length] + index;
        }
        if (index >= allColors[$length]) {
          index = index[$modulo](allColors[$length]);
        }
        answers[$add](allColors[$_get](index));
      }
      return answers;
    }
    get complement() {
      if (this[_complement] != null) {
        return dart.nullCheck(this[_complement]);
      }
      let coldestHue = this.coldest.hue;
      let coldestTemp = dart.nullCheck(this.tempsByHct[$_get](this.coldest));
      let warmestHue = this.warmest.hue;
      let warmestTemp = dart.nullCheck(this.tempsByHct[$_get](this.warmest));
      let range = warmestTemp - coldestTemp;
      let startHueIsColdestToWarmest = temperature_cache.TemperatureCache.isBetween({angle: this.input.hue, a: coldestHue, b: warmestHue});
      let startHue = startHueIsColdestToWarmest ? warmestHue : coldestHue;
      let endHue = startHueIsColdestToWarmest ? coldestHue : warmestHue;
      let smallestError = 1000.0;
      let answer = this.hctsByHue[$_get](this.input.hue[$round]());
      let complementRelativeTemp = 1.0 - this.inputRelativeTemperature;
      for (let hueAddend = 0.0; hueAddend <= 360.0; hueAddend = hueAddend + 1.0) {
        let hue = math_utils.MathUtils.sanitizeDegreesDouble(startHue + 1 * hueAddend);
        if (!temperature_cache.TemperatureCache.isBetween({angle: hue, a: startHue, b: endHue})) {
          continue;
        }
        let possibleAnswer = this.hctsByHue[$_get](hue[$round]());
        let relativeTemp = (dart.nullCheck(this[_tempsByHct][$_get](possibleAnswer)) - coldestTemp) / range;
        let error = (complementRelativeTemp - relativeTemp)[$abs]();
        if (error < smallestError) {
          smallestError = error;
          answer = possibleAnswer;
        }
      }
      this[_complement] = answer;
      return dart.nullCheck(this[_complement]);
    }
    relativeTemperature(hct) {
      let range = dart.nullCheck(this.tempsByHct[$_get](this.warmest)) - dart.nullCheck(this.tempsByHct[$_get](this.coldest));
      let differenceFromColdest = dart.nullCheck(this.tempsByHct[$_get](hct)) - dart.nullCheck(this.tempsByHct[$_get](this.coldest));
      if (range === 0.0) {
        return 0.5;
      }
      return differenceFromColdest / range;
    }
    get inputRelativeTemperature() {
      if (this[_inputRelativeTemperature] >= 0.0) {
        return this[_inputRelativeTemperature];
      }
      let coldestTemp = dart.nullCheck(this.tempsByHct[$_get](this.coldest));
      let range = dart.nullCheck(this.tempsByHct[$_get](this.warmest)) - coldestTemp;
      let differenceFromColdest = dart.nullCheck(this.tempsByHct[$_get](this.input)) - coldestTemp;
      let inputRelativeTemp = range === 0.0 ? 0.5 : differenceFromColdest / range;
      this[_inputRelativeTemperature] = inputRelativeTemp;
      return this[_inputRelativeTemperature];
    }
    get hctsByTemp() {
      if (this[_hctsByTemp][$isNotEmpty]) {
        return this[_hctsByTemp];
      }
      let hcts = G.ListOfHct().from(this.hctsByHue, {growable: true});
      hcts[$add](this.input);
      let temperaturesByHct = this.tempsByHct;
      hcts[$sort](dart.fn((a, b) => dart.nullCheck(temperaturesByHct[$_get](a))[$compareTo](dart.nullCheck(temperaturesByHct[$_get](b))), T.HctAndHctToint()));
      this[_hctsByTemp] = hcts;
      return this[_hctsByTemp];
    }
    get tempsByHct() {
      let t$360;
      if (this[_tempsByHct][$isNotEmpty]) {
        return this[_tempsByHct];
      }
      let allHcts = (t$360 = G.ListOfHct().from(this.hctsByHue), (() => {
        t$360[$add](this.input);
        return t$360;
      })());
      let temperaturesByHct = (() => {
        let t$360 = new (G.LinkedMapOfHct$double()).new();
        for (let e of allHcts)
          t$360[$_set](e, temperature_cache.TemperatureCache.rawTemperature(e));
        return t$360;
      })();
      this[_tempsByHct] = temperaturesByHct;
      return this[_tempsByHct];
    }
    get hctsByHue() {
      if (this[_hctsByHue][$isNotEmpty]) {
        return this[_hctsByHue];
      }
      let hcts = G.JSArrayOfHct().of([]);
      for (let hue = 0.0; hue <= 360.0; hue = hue + 1.0) {
        let colorAtHue = hct.Hct.from(hue, this.input.chroma, this.input.tone);
        hcts[$add](colorAtHue);
      }
      this[_hctsByHue] = G.ListOfHct().from(hcts, {growable: false});
      return this[_hctsByHue];
    }
    static isBetween(opts) {
      let angle = opts && 'angle' in opts ? opts.angle : null;
      let a = opts && 'a' in opts ? opts.a : null;
      let b = opts && 'b' in opts ? opts.b : null;
      if (a < b) {
        return a <= angle && angle <= b;
      }
      return a <= angle || angle <= b;
    }
    static rawTemperature(color) {
      let lab = color_utils.ColorUtils.labFromArgb(color.toInt());
      let hue = math_utils.MathUtils.sanitizeDegreesDouble(math.atan2(lab[$_get](2), lab[$_get](1)) * 180.0 / 3.141592653589793);
      let chroma = math.sqrt(lab[$_get](1) * lab[$_get](1) + lab[$_get](2) * lab[$_get](2));
      let temperature = -0.5 + 0.02 * math.pow(chroma, 1.07) * math.cos(math_utils.MathUtils.sanitizeDegreesDouble(hue - 50.0) * 3.141592653589793 / 180.0);
      return temperature;
    }
  };
  (temperature_cache.TemperatureCache.new = function(input) {
    this[_hctsByTemp] = G.JSArrayOfHct().of([]);
    this[_hctsByHue] = G.JSArrayOfHct().of([]);
    this[_tempsByHct] = new (G.LinkedMapOfHct$double()).new();
    this[_inputRelativeTemperature] = -1.0;
    this[_complement] = null;
    this[input$] = input;
    ;
  }).prototype = temperature_cache.TemperatureCache.prototype;
  dart.addRtiResources(temperature_cache.TemperatureCache, ["material_color_utilities__temperature__temperature_cache|TemperatureCache"]);
  dart.setMethodSignature(temperature_cache.TemperatureCache, () => dart.global.Object.setPrototypeOf({
    analogous: T.__ToListOfHct(),
    relativeTemperature: T.HctTodouble()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(temperature_cache.TemperatureCache))));
  dart.setStaticMethodSignature(temperature_cache.TemperatureCache, () => ['isBetween', 'rawTemperature']);
  dart.setGetterSignature(temperature_cache.TemperatureCache, () => dart.global.Object.setPrototypeOf({
    warmest: T.Hct(),
    coldest: T.Hct(),
    complement: T.Hct(),
    inputRelativeTemperature: T.double(),
    hctsByTemp: T.ListOfHct(),
    tempsByHct: T.MapOfHct$double(),
    hctsByHue: T.ListOfHct()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(temperature_cache.TemperatureCache))));
  dart.setLibraryUri(temperature_cache.TemperatureCache, I[0]);
  dart.setFieldSignature(temperature_cache.TemperatureCache, () => dart.global.Object.setPrototypeOf({
    input: {type: T.Hct(), isConst: false, isFinal: true, libraryUri: I[1]},
    [_hctsByTemp]: {type: T.ListOfHct(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_hctsByHue]: {type: T.ListOfHct(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_tempsByHct]: {type: T.MapOfHct$double(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_inputRelativeTemperature]: {type: T.double(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_complement]: {type: T.HctN(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(temperature_cache.TemperatureCache))));
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|Map":{"Map.K":"1","Map.V":"2"}}'));
  dart.trackLibraries("packages/material_color_utilities/temperature/temperature_cache.dart", {
    "package:material_color_utilities/temperature/temperature_cache.dart": temperature_cache
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["temperature_cache.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/material_color_utilities/temperature/temperature_cache.dart.lib.js"}');
  // Exports:
  return {
    temperature__temperature_cache: temperature_cache
  };
}));

//# sourceMappingURL=temperature_cache.dart.lib.js.map
