// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.5.3 (stable) (Wed Sep 11 16:22:47 2024 +0000) on "windows_x64"
// Module: packages/material_color_utilities/palettes/tonal_palette.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/hct/hct.dart', 'packages/collection/src/equality.dart'], (function load__packages__material_color_utilities__palettes__tonal_palette_dart(dart_sdk, packages__material_color_utilities__hct__hct$46dart, packages__collection__src__equality$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const hct$ = packages__material_color_utilities__hct__hct$46dart.hct__hct;
  const equality = packages__collection__src__equality$46dart.src__equality;
  var tonal_palette = Object.create(dart.library);
  var $length = dartx.length;
  var $asMap = dartx.asMap;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $forEach = dartx.forEach;
  var $abs = dartx.abs;
  var $round = dartx.round;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $toDouble = dartx.toDouble;
  var $putIfAbsent = dartx.putIfAbsent;
  var $containsKey = dartx.containsKey;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    intAndintTovoid: () => (T.intAndintTovoid = dart.constFn(dart_rti.findType("~(core|int,core|int)")))(),
    intToint: () => (T.intToint = dart.constFn(dart_rti.findType("core|int(core|int)")))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart_rti.findType("core|int()")))(),
    TonalPalette: () => (T.TonalPalette = dart.constFn(dart_rti.findType("material_color_utilities__palettes__tonal_palette|TonalPalette")))(),
    doubleAnddoubleToTonalPalette: () => (T.doubleAnddoubleToTonalPalette = dart.constFn(dart_rti.findType("material_color_utilities__palettes__tonal_palette|TonalPalette(core|double,core|double)")))(),
    HctToTonalPalette: () => (T.HctToTonalPalette = dart.constFn(dart_rti.findType("material_color_utilities__palettes__tonal_palette|TonalPalette(material_color_utilities__hct__hct|Hct)")))(),
    ListOfintToTonalPalette: () => (T.ListOfintToTonalPalette = dart.constFn(dart_rti.findType("material_color_utilities__palettes__tonal_palette|TonalPalette(core|List<core|int>)")))(),
    doubleAnddoubleToHct: () => (T.doubleAnddoubleToHct = dart.constFn(dart_rti.findType("material_color_utilities__hct__hct|Hct(core|double,core|double)")))(),
    ListOfint: () => (T.ListOfint = dart.constFn(dart_rti.findType("core|List<core|int>")))(),
    doubleToHct: () => (T.doubleToHct = dart.constFn(dart_rti.findType("material_color_utilities__hct__hct|Hct(core|double)")))(),
    double: () => (T.double = dart.constFn(dart_rti.findType("core|double")))(),
    Hct: () => (T.Hct = dart.constFn(dart_rti.findType("material_color_utilities__hct__hct|Hct")))(),
    MapOfint$int: () => (T.MapOfint$int = dart.constFn(dart_rti.findType("core|Map<core|int,core|int>")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))()
  };
  var G = {
    IdentityMapOfint$int: () => (G.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(T.int(), T.int())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 99, 100], T.int());
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/Users/h1971/AppData/Local/Pub/Cache/hosted/pub.dev/material_color_utilities-0.11.1/lib/palettes/tonal_palette.dart",
    "package:material_color_utilities/palettes/tonal_palette.dart",
    "dart:core",
    "package:material_color_utilities/hct/hct.dart"
  ];
  var hue$ = dart.privateName(tonal_palette, "TonalPalette.hue");
  var chroma$ = dart.privateName(tonal_palette, "TonalPalette.chroma");
  var keyColor = dart.privateName(tonal_palette, "TonalPalette.keyColor");
  var _cache = dart.privateName(tonal_palette, "_cache");
  var _isFromCache = dart.privateName(tonal_palette, "_isFromCache");
  var _is = dart.privateName(dart_rti, "_is");
  tonal_palette.TonalPalette = class TonalPalette extends core.Object {
    get hue() {
      return this[hue$];
    }
    set hue(value) {
      super.hue = value;
    }
    get chroma() {
      return this[chroma$];
    }
    set chroma(value) {
      super.chroma = value;
    }
    get keyColor() {
      return this[keyColor];
    }
    set keyColor(value) {
      super.keyColor = value;
    }
    static ['_#_fromHct#tearOff'](hct) {
      return new tonal_palette.TonalPalette._fromHct(hct);
    }
    static ['_#_fromHueAndChroma#tearOff'](hue, chroma) {
      return new tonal_palette.TonalPalette._fromHueAndChroma(hue, chroma);
    }
    static ['_#_fromCache#tearOff'](cache, hue, chroma) {
      return new tonal_palette.TonalPalette._fromCache(cache, hue, chroma);
    }
    static of(hue, chroma) {
      return new tonal_palette.TonalPalette._fromHueAndChroma(hue, chroma);
    }
    static fromHct(hct) {
      return new tonal_palette.TonalPalette._fromHct(hct);
    }
    static fromList(colors) {
      if (!(colors[$length] === tonal_palette.TonalPalette.commonSize)) dart.assertFailed(null, I[0], 88, 12, "colors.length == commonSize");
      let cache = new (G.IdentityMapOfint$int()).new();
      tonal_palette.TonalPalette.commonTones[$asMap]()[$forEach](dart.fn((index, toneValue) => {
        let t$362, t$361, t$360;
        t$360 = cache;
        t$361 = toneValue;
        t$362 = colors[$_get](index);
        t$360[$_set](t$361, t$362);
        return t$362;
      }, T.intAndintTovoid()));
      let bestHue = 0.0;
      let bestChroma = 0.0;
      for (let argb of colors) {
        let hct = hct$.Hct.fromInt(argb);
        if (hct.tone > 98.0) continue;
        if (hct.chroma > bestChroma) {
          bestHue = hct.hue;
          bestChroma = hct.chroma;
        }
      }
      return new tonal_palette.TonalPalette._fromCache(cache, bestHue, bestChroma);
    }
    static createKeyColor(hue, chroma) {
      let startTone = 50.0;
      let smallestDeltaHct = hct$.Hct.from(hue, chroma, startTone);
      let smallestDelta = (smallestDeltaHct.chroma - chroma)[$abs]();
      for (let delta = 1.0; delta < 50.0; delta = delta + 1.0) {
        if (chroma[$round]() === smallestDeltaHct.chroma[$round]()) {
          return smallestDeltaHct;
        }
        let hctAdd = hct$.Hct.from(hue, chroma, startTone + delta);
        let hctAddDelta = (hctAdd.chroma - chroma)[$abs]();
        if (hctAddDelta < smallestDelta) {
          smallestDelta = hctAddDelta;
          smallestDeltaHct = hctAdd;
        }
        let hctSubtract = hct$.Hct.from(hue, chroma, startTone - delta);
        let hctSubtractDelta = (hctSubtract.chroma - chroma)[$abs]();
        if (hctSubtractDelta < smallestDelta) {
          smallestDelta = hctSubtractDelta;
          smallestDeltaHct = hctSubtract;
        }
      }
      return smallestDeltaHct;
    }
    get asList() {
      return tonal_palette.TonalPalette.commonTones[$map](T.int(), dart.fn(tone => this.get(tone), T.intToint()))[$toList]();
    }
    get(tone) {
      return this[_cache][$putIfAbsent](tone, dart.fn(() => hct$.Hct.from(this.hue, this.chroma, tone[$toDouble]()).toInt(), T.VoidToint()));
    }
    getHct(tone) {
      if (this[_cache][$containsKey](tone)) {
        return hct$.Hct.fromInt(dart.nullCheck(this[_cache][$_get](tone)));
      } else {
        return hct$.Hct.from(this.hue, this.chroma, tone);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (T.TonalPalette()[_is](other)) {
        if (!this[_isFromCache] && !other[_isFromCache]) {
          return this.hue === other.hue && this.chroma === other.chroma;
        } else {
          return new equality.ListEquality.new().equals(this.asList, other.asList);
        }
      }
      return false;
    }
    get hashCode() {
      if (!this[_isFromCache]) {
        return core.Object.hash(this.hue, this.chroma);
      } else {
        return core.Object.hashAll(this.asList);
      }
    }
    toString() {
      if (!this[_isFromCache]) {
        return "TonalPalette.of(" + dart.strSafe(this.hue) + ", " + dart.strSafe(this.chroma) + ")";
      } else {
        return "TonalPalette.fromList(" + dart.str(this.asList) + ")";
      }
    }
  };
  (tonal_palette.TonalPalette._fromHct = function(hct) {
    this[_cache] = new (G.IdentityMapOfint$int()).new();
    this[hue$] = hct.hue;
    this[chroma$] = hct.chroma;
    this[keyColor] = hct;
    this[_isFromCache] = false;
    ;
  }).prototype = tonal_palette.TonalPalette.prototype;
  (tonal_palette.TonalPalette._fromHueAndChroma = function(hue, chroma) {
    this[hue$] = hue;
    this[chroma$] = chroma;
    this[_cache] = new (G.IdentityMapOfint$int()).new();
    this[keyColor] = tonal_palette.TonalPalette.createKeyColor(hue, chroma);
    this[_isFromCache] = false;
    ;
  }).prototype = tonal_palette.TonalPalette.prototype;
  (tonal_palette.TonalPalette._fromCache = function(cache, hue, chroma) {
    this[hue$] = hue;
    this[chroma$] = chroma;
    this[_cache] = cache;
    this[keyColor] = tonal_palette.TonalPalette.createKeyColor(hue, chroma);
    this[_isFromCache] = true;
    ;
  }).prototype = tonal_palette.TonalPalette.prototype;
  dart.addRtiResources(tonal_palette.TonalPalette, ["material_color_utilities__palettes__tonal_palette|TonalPalette"]);
  dart.setMethodSignature(tonal_palette.TonalPalette, () => dart.global.Object.setPrototypeOf({
    get: T.intToint(),
    getHct: T.doubleToHct()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(tonal_palette.TonalPalette))));
  dart.setStaticMethodSignature(tonal_palette.TonalPalette, () => ['of', 'fromHct', 'fromList', 'createKeyColor']);
  dart.setGetterSignature(tonal_palette.TonalPalette, () => dart.global.Object.setPrototypeOf({asList: T.ListOfint()}, dart.getGetters(dart.global.Object.getPrototypeOf(tonal_palette.TonalPalette))));
  dart.setLibraryUri(tonal_palette.TonalPalette, I[1]);
  dart.setFieldSignature(tonal_palette.TonalPalette, () => dart.global.Object.setPrototypeOf({
    hue: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    chroma: {type: T.double(), isConst: false, isFinal: true, libraryUri: I[2]},
    keyColor: {type: T.Hct(), isConst: false, isFinal: true, libraryUri: I[3]},
    [_cache]: {type: T.MapOfint$int(), isConst: false, isFinal: true, libraryUri: I[2]},
    [_isFromCache]: {type: T.bool(), isConst: false, isFinal: true, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(tonal_palette.TonalPalette))));
  dart.setStaticFieldSignature(tonal_palette.TonalPalette, () => ['commonTones', 'commonSize']);
  dart.defineExtensionMethods(tonal_palette.TonalPalette, ['_equals', 'toString']);
  dart.defineExtensionAccessors(tonal_palette.TonalPalette, ['hashCode']);
  dart.defineLazy(tonal_palette.TonalPalette, {
    /*tonal_palette.TonalPalette.commonTones*/get commonTones() {
      return C[0] || CT.C0;
    },
    /*tonal_palette.TonalPalette.commonSize*/get commonSize() {
      return tonal_palette.TonalPalette.commonTones[$length];
    }
  }, false);
  dart.moduleConstCaches.set("packages/material_color_utilities/palettes/tonal_palette.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|Map":{"Map.K":"1","Map.V":"2"}}'));
  dart.trackLibraries("packages/material_color_utilities/palettes/tonal_palette.dart", {
    "package:material_color_utilities/palettes/tonal_palette.dart": tonal_palette
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tonal_palette.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8Ce;;;;;;IACA;;;;;;IACH;;;;;;;;;;;;;;;cA0BoB,KAAY;AACxC,YAAoB,kDAAkB,GAAG,EAAE,MAAM;IACnD;mBAGgC;AAC9B,YAAoB,yCAAS,GAAG;IAClC;oBAKuC;AACrC,YAAO,AAAO,AAAO,MAAR,cAAW;AACpB,kBAAkB;AACF,MAApB,AAAY,2DACR,SAAK,OAAW;;AAAc,qBAAK;gBAAC,SAAS;gBAAI,AAAM,MAAA,QAAC,KAAK;QAA1B;;;AAMnC,oBAAU;AAAK,uBAAa;AAChC,eAAW,OAAQ,OAAM;AACjB,kBAAU,iBAAQ,IAAI;AAM5B,YAAI,AAAI,GAAD,QAAQ,MAAM;AAErB,YAAI,AAAI,GAAD,UAAU,UAAU;AACzB,oBAAU,AAAI,GAAD;AACb,uBAAa,AAAI,GAAD;;;AAIpB,YAAoB,2CAAW,KAAK,EAAE,OAAO,EAAE,UAAU;IAC3D;0BAKiC,KAAY;AACpC,sBAAY;AACf,6BAAuB,cAAK,GAAG,EAAE,MAAM,EAAE,SAAS;AAC/C,0BAAmD,CAAlC,AAAiB,gBAAD,UAAU,MAAM;AAOxD,eAAY,QAAQ,KAAK,KAAK,GAAG,MAAY,QAAN,KAAK,GAAI;AAK9C,YAAI,AAAO,AAAQ,MAAT,eAAY,AAAiB,AAAO,gBAAR;AACpC,gBAAO,iBAAgB;;AAGf,qBAAa,cAAK,GAAG,EAAE,MAAM,EAAE,SAAS,GAAG,KAAK;AAC7C,0BAAuC,CAAxB,AAAO,MAAD,UAAU,MAAM;AAClD,YAAI,WAAW,GAAG,aAAa;AAC7B,0BAAgB,WAAW;AAC3B,6BAAmB,MAAM;;AAGjB,0BAAkB,cAAK,GAAG,EAAE,MAAM,EAAE,SAAS,GAAG,KAAK;AAClD,+BAAiD,CAA7B,AAAY,WAAD,UAAU,MAAM;AAC5D,YAAI,gBAAgB,GAAG,aAAa;AAClC,0BAAgB,gBAAgB;AAChC,6BAAmB,WAAW;;;AAIlC,YAAO,iBAAgB;IACzB;;AAKwB,YAAA,AAAY,AAA6B,uDAAzB,QAAK,QAAS,SAAI,IAAI;IAAW;QAW7D;AACV,YAAO,AAAO,4BACZ,IAAI,EACJ,cAAU,AAAmC,cAA9B,UAAK,aAAQ,AAAK,IAAD;IAEpC;WAWkB;AAChB,UAAI,AAAO,2BAAY,IAAI;AACzB,cAAW,kBAAoB,eAAZ,AAAM,oBAAC,IAAI;;AAE9B,cAAW,eAAK,UAAK,aAAQ,IAAI;;IAErC;YAGwB;;AACtB,UAAU,sBAAN,KAAK;AACP,aAAK,uBAAiB,AAAM,KAAD;AAEzB,gBAAO,AAAI,AAAa,cAAV,AAAM,KAAD,QAAQ,AAAO,gBAAG,AAAM,KAAD;;AAE1C,gBAAO,AAAe,wCAAO,aAAQ,AAAM,KAAD;;;AAG9C,YAAO;IACT;;AAIE,WAAK;AACH,cAAc,kBAAK,UAAK;;AAExB,cAAc,qBAAQ;;IAE1B;;AAIE,WAAK;AACH,cAAO,mCAAkB,YAAG,oBAAG,eAAM;;AAErC,cAAO,qCAAwB,eAAM;;IAEzC;;kDAtK0B;IACb,eAAE;IACL,aAAE,AAAI,GAAD;IACF,gBAAE,AAAI,GAAD;IACH,iBAAE,GAAG;IACD,qBAAE;;EAAK;2DAEU,KAAU;IAAV;IAAU;IACjC,eAAE;IACA,iBAAE,0CAAe,GAAG,EAAE,MAAM;IACxB,qBAAE;;EAAK;oDAEY,OAAY,KAAU;IAAV;IAAU;IAC/C,eAAE,KAAK;IACL,iBAAE,0CAAe,GAAG,EAAE,MAAM;IACxB,qBAAE;;EAAI;;;;;;;;;;;;;;;;;;;;MA3CF,sCAAW;;;MAgBrB,qCAAU;YAAG,AAAY","file":"../../../../../../../../../../../packages/material_color_utilities/palettes/tonal_palette.dart.lib.js"}');
  // Exports:
  return {
    palettes__tonal_palette: tonal_palette
  };
}));

//# sourceMappingURL=tonal_palette.dart.lib.js.map
