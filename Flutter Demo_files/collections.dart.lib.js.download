// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.5.3 (stable) (Wed Sep 11 16:22:47 2024 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/collections.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__flutter__src__foundation__collections_dart(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var collections = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $keys = dartx.keys;
  var $containsKey = dartx.containsKey;
  var $rightShift = dartx['>>'];
  var $compareTo = dartx.compareTo;
  var $setRange = dartx.setRange;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    Comparable: () => (T$.Comparable = dart.constFn(dart_rti.findType("core|Comparable<@>")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["file:///C:/dev/flutter/packages/flutter/lib/src/foundation/collections.dart"];
  var _as = dart.privateName(dart_rti, "_as");
  var _eval = dart.privateName(dart_rti, "_eval");
  collections.setEquals = function setEquals(T, a, b) {
    if (a == null) {
      return b == null;
    }
    if (b == null || a[$length] !== b[$length]) {
      return false;
    }
    if (a == b) {
      return true;
    }
    for (let value of a) {
      if (!b.contains(value)) {
        return false;
      }
    }
    return true;
  };
  collections.listEquals = function listEquals(T, a, b) {
    if (a == null) {
      return b == null;
    }
    if (b == null || a[$length] !== b[$length]) {
      return false;
    }
    if (a == b) {
      return true;
    }
    for (let index = 0; index < a[$length]; index = index + 1) {
      if (!dart.equals(a[$_get](index), b[$_get](index))) {
        return false;
      }
    }
    return true;
  };
  collections.mapEquals = function mapEquals(T, U, a, b) {
    if (a == null) {
      return b == null;
    }
    if (b == null || a[$length] !== b[$length]) {
      return false;
    }
    if (a == b) {
      return true;
    }
    for (let key of a[$keys]) {
      if (!b[$containsKey](key) || !dart.equals(b[$_get](key), a[$_get](key))) {
        return false;
      }
    }
    return true;
  };
  collections.binarySearch = function binarySearch(T, sortedList, value) {
    let min = 0;
    let max = sortedList[$length];
    while (min < max) {
      let mid = min + (max - min)[$rightShift](1);
      let element = sortedList[$_get](mid);
      let comp = element[$compareTo](value);
      if (comp === 0) {
        return mid;
      }
      if (comp < 0) {
        min = mid + 1;
      } else {
        max = mid;
      }
    }
    return -1;
  };
  collections.mergeSort = function mergeSort(T, list, opts) {
    let start = opts && 'start' in opts ? opts.start : 0;
    let end = opts && 'end' in opts ? opts.end : null;
    let compare = opts && 'compare' in opts ? opts.compare : null;
    end == null ? end = list[$length] : null;
    compare == null ? compare = collections._defaultCompare(T) : null;
    let length = dart.notNull(end) - start;
    if (length < 2) {
      return;
    }
    if (length < 32) {
      collections._insertionSort(T, list, {compare: compare, start: start, end: end});
      return;
    }
    let middle = start + (dart.notNull(end) - start)[$rightShift](1);
    let firstLength = middle - start;
    let secondLength = dart.notNull(end) - middle;
    let scratchSpace = core.List$(T).filled(secondLength, list[$_get](start));
    collections._mergeSort(T, list, compare, middle, end, scratchSpace, 0);
    let firstTarget = dart.notNull(end) - firstLength;
    collections._mergeSort(T, list, compare, start, middle, list, firstTarget);
    collections._merge(T, compare, list, firstTarget, end, scratchSpace, 0, secondLength, list, start);
  };
  collections._defaultCompare = function _defaultCompare(T) {
    return dart.fn((value1, value2) => T$.Comparable()[_as](value1)[$compareTo](value2), T[_eval]("core|int(0,0)"));
  };
  collections._insertionSort = function _insertionSort(T, list, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    let start = opts && 'start' in opts ? opts.start : 0;
    let end = opts && 'end' in opts ? opts.end : null;
    compare == null ? compare = collections._defaultCompare(T) : null;
    end == null ? end = list[$length] : null;
    for (let pos = start + 1; pos < dart.notNull(end); pos = pos + 1) {
      let min = start;
      let max = pos;
      let element = list[$_get](pos);
      while (min < max) {
        let mid = min + (max - min)[$rightShift](1);
        let comparison = compare(element, list[$_get](mid));
        if (comparison < 0) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }
      list[$setRange](min + 1, pos + 1, list, min);
      list[$_set](min, element);
    }
  };
  collections._movingInsertionSort = function _movingInsertionSort(T, list, compare, start, end, target, targetOffset) {
    let length = end - start;
    if (length === 0) {
      return;
    }
    target[$_set](targetOffset, list[$_get](start));
    for (let i = 1; i < length; i = i + 1) {
      let element = list[$_get](start + i);
      let min = targetOffset;
      let max = targetOffset + i;
      while (min < max) {
        let mid = min + (max - min)[$rightShift](1);
        if (compare(element, target[$_get](mid)) < 0) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }
      target[$setRange](min + 1, targetOffset + i + 1, target, min);
      target[$_set](min, element);
    }
  };
  collections._mergeSort = function _mergeSort(T, list, compare, start, end, target, targetOffset) {
    let length = end - start;
    if (length < 32) {
      collections._movingInsertionSort(T, list, compare, start, end, target, targetOffset);
      return;
    }
    let middle = start + length[$rightShift](1);
    let firstLength = middle - start;
    let secondLength = end - middle;
    let targetMiddle = targetOffset + firstLength;
    collections._mergeSort(T, list, compare, middle, end, target, targetMiddle);
    collections._mergeSort(T, list, compare, start, middle, list, middle);
    collections._merge(T, compare, list, middle, middle + firstLength, target, targetMiddle, targetMiddle + secondLength, target, targetOffset);
  };
  collections._merge = function _merge(T, compare, firstList, firstStart, firstEnd, secondList, secondStart, secondEnd, target, targetOffset) {
    let t$360, t$360$, t$360$0, t$360$1, t$360$2, t$360$3, t$360$4, t$360$5;
    if (!(firstStart < firstEnd)) dart.assertFailed(null, I[0], 339, 10, "firstStart < firstEnd");
    if (!(secondStart < secondEnd)) dart.assertFailed(null, I[0], 340, 10, "secondStart < secondEnd");
    let cursor1 = firstStart;
    let cursor2 = secondStart;
    let firstElement = firstList[$_get]((t$360 = cursor1, cursor1 = t$360 + 1, t$360));
    let secondElement = secondList[$_get]((t$360$ = cursor2, cursor2 = t$360$ + 1, t$360$));
    while (true) {
      if (compare(firstElement, secondElement) <= 0) {
        target[$_set]((t$360$0 = targetOffset, targetOffset = t$360$0 + 1, t$360$0), firstElement);
        if (cursor1 === firstEnd) {
          break;
        }
        firstElement = firstList[$_get]((t$360$1 = cursor1, cursor1 = t$360$1 + 1, t$360$1));
      } else {
        target[$_set]((t$360$2 = targetOffset, targetOffset = t$360$2 + 1, t$360$2), secondElement);
        if (cursor2 !== secondEnd) {
          secondElement = secondList[$_get]((t$360$3 = cursor2, cursor2 = t$360$3 + 1, t$360$3));
          continue;
        }
        target[$_set]((t$360$4 = targetOffset, targetOffset = t$360$4 + 1, t$360$4), firstElement);
        target[$setRange](targetOffset, targetOffset + (firstEnd - cursor1), firstList, cursor1);
        return;
      }
    }
    target[$_set]((t$360$5 = targetOffset, targetOffset = t$360$5 + 1, t$360$5), secondElement);
    target[$setRange](targetOffset, targetOffset + (secondEnd - cursor2), secondList, cursor2);
  };
  dart.defineLazy(collections, {
    /*collections._kMergeSortLimit*/get _kMergeSortLimit() {
      return 32;
    }
  }, false);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]}}'));
  dart.trackLibraries("packages/flutter/src/foundation/collections.dart", {
    "package:flutter/src/foundation/collections.dart": collections
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["collections.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAwB0B,GAAW;AACnC,QAAI,AAAE,CAAD;AACH,YAAO,AAAE,EAAD;;AAEV,QAAI,AAAE,CAAD,YAAY,AAAE,CAAD,cAAW,AAAE,CAAD;AAC5B,YAAO;;AAET,QAAI,AAAU,CAAC,IAAE,CAAC;AAChB,YAAO;;AAET,aAAa,QAAS,EAAC;AACrB,WAAK,AAAE,CAAD,UAAU,KAAK;AACnB,cAAO;;;AAGX,UAAO;EACT;kDAiB4B,GAAY;AACtC,QAAI,AAAE,CAAD;AACH,YAAO,AAAE,EAAD;;AAEV,QAAI,AAAE,CAAD,YAAY,AAAE,CAAD,cAAW,AAAE,CAAD;AAC5B,YAAO;;AAET,QAAI,AAAU,CAAC,IAAE,CAAC;AAChB,YAAO;;AAET,aAAS,QAAQ,GAAG,KAAK,GAAG,AAAE,CAAD,WAAe,QAAN,KAAK,GAAI;AAC7C,uBAAI,AAAC,CAAA,QAAC,KAAK,GAAK,AAAC,CAAA,QAAC,KAAK;AACrB,cAAO;;;AAGX,UAAO;EACT;mDAiBgC,GAAc;AAC5C,QAAI,AAAE,CAAD;AACH,YAAO,AAAE,EAAD;;AAEV,QAAI,AAAE,CAAD,YAAY,AAAE,CAAD,cAAW,AAAE,CAAD;AAC5B,YAAO;;AAET,QAAI,AAAU,CAAC,IAAE,CAAC;AAChB,YAAO;;AAET,aAAa,MAAO,AAAE,EAAD;AACnB,WAAK,AAAE,CAAD,eAAa,GAAG,kBAAK,AAAC,CAAA,QAAC,GAAG,GAAK,AAAC,CAAA,QAAC,GAAG;AACxC,cAAO;;;AAGX,UAAO;EACT;sDAMuD,YAAc;AAC/D,cAAM;AACN,cAAM,AAAW,UAAD;AACpB,WAAO,GAAG,GAAG,GAAG;AACJ,gBAAM,GAAG,GAAgB,CAAX,GAAG,GAAG,GAAG,eAAK;AAC9B,oBAAU,AAAU,UAAA,QAAC,GAAG;AACtB,iBAAO,AAAQ,OAAD,aAAW,KAAK;AACxC,UAAI,AAAK,IAAD,KAAI;AACV,cAAO,IAAG;;AAEZ,UAAI,IAAI,GAAG;AACT,QAAU,MAAJ,GAAG,GAAG;;AAEZ,cAAM,GAAG;;;AAGb,UAAO,EAAC;EACV;gDA2BU;QACJ;QACC;QACe;AAEhB,IAAJ,GAAG,iBAAK,AAAK,IAAD,YAAR;AACI,IAAR,OAAO,qBAAK,iCAAJ;AAEE,8BAAS,GAAG,IAAG,KAAK;AAC9B,QAAI,MAAM,GAAG;AACX;;AAEF,QAAI,MAAM;AACR,oCAAkB,IAAI,YAAW,OAAO,SAAS,KAAK,OAAO,GAAG;AAChE;;AAOQ,iBAAS,KAAK,GAAkB,cAAb,GAAG,IAAG,KAAK,eAAK;AACnC,sBAAc,MAAM,GAAG,KAAK;AAC5B,oCAAe,GAAG,IAAG,MAAM;AAEvB,uBAAe,qBAAe,YAAY,EAAE,AAAI,IAAA,QAAC,KAAK;AACpE,8BAAc,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE;AAC9C,mCAAc,GAAG,IAAG,WAAW;AACzC,8BAAc,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW;AAC7D,0BAAU,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,YAAY,EAAE,IAAI,EAAE,KAAK;EACvF;;AAOE,UAAO,UAAG,QAAU,WAAmB,AAAwB,qBAA/B,MAAM,cAAmC,MAAM;EACjF;0DAoBU;QACY;QAChB;QACC;AAIG,IAAR,OAAO,qBAAK,iCAAJ;AACJ,IAAJ,GAAG,iBAAK,AAAK,IAAD,YAAR;AAEJ,aAAS,MAAM,KAAK,GAAG,GAAG,GAAG,gBAAG,GAAG,GAAK,MAAH,GAAG;AAClC,gBAAM,KAAK;AACX,gBAAM,GAAG;AACL,oBAAU,AAAI,IAAA,QAAC,GAAG;AAC1B,aAAO,GAAG,GAAG,GAAG;AACJ,kBAAM,GAAG,GAAgB,CAAX,GAAG,GAAG,GAAG,eAAK;AAC5B,yBAAa,AAAO,OAAA,CAAC,OAAO,EAAE,AAAI,IAAA,QAAC,GAAG;AAChD,YAAI,UAAU,GAAG;AACf,gBAAM,GAAG;;AAET,UAAU,MAAJ,GAAG,GAAG;;;AAGX,MAAL,IAAI,YAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE,GAAG;AACrC,MAAJ,IAAI,QAAC,GAAG,EAAI,OAAO;;EAEvB;sEAOU,MACW,SACf,OACA,KACI,QACJ;AAEM,iBAAS,GAAG,GAAG,KAAK;AAC9B,QAAI,AAAO,MAAD,KAAI;AACZ;;AAEI,IAAN,MAAM,QAAC,YAAY,EAAI,AAAI,IAAA,QAAC,KAAK;AACjC,aAAS,IAAI,GAAG,CAAC,GAAG,MAAM,EAAG,IAAD,CAAC;AACnB,oBAAU,AAAI,IAAA,QAAC,KAAK,GAAG,CAAC;AAC5B,gBAAM,YAAY;AAClB,gBAAM,YAAY,GAAG,CAAC;AAC1B,aAAO,GAAG,GAAG,GAAG;AACJ,kBAAM,GAAG,GAAgB,CAAX,GAAG,GAAG,GAAG,eAAK;AACtC,YAAI,AAAO,OAAA,CAAC,OAAO,EAAE,AAAM,MAAA,QAAC,GAAG,KAAK;AAClC,gBAAM,GAAG;;AAET,UAAU,MAAJ,GAAG,GAAG;;;AAGT,MAAP,MAAM,YAAU,GAAG,GAAG,GAAG,YAAY,GAAG,CAAC,GAAG,GAAG,MAAM,EAAE,GAAG;AACpD,MAAN,MAAM,QAAC,GAAG,EAAI,OAAO;;EAEzB;kDAUU,MACW,SACf,OACA,KACI,QACJ;AAEM,iBAAS,GAAG,GAAG,KAAK;AAC9B,QAAI,MAAM;AACR,0CAAwB,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,YAAY;AACvE;;AAEQ,iBAAS,KAAK,GAAI,AAAO,MAAD,cAAI;AAC5B,sBAAc,MAAM,GAAG,KAAK;AAC5B,uBAAe,GAAG,GAAG,MAAM;AAE3B,uBAAe,YAAY,GAAG,WAAW;AAEnD,8BAAc,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,YAAY;AAE9D,8BAAc,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;AAExD,0BACE,OAAO,EACP,IAAI,EACJ,MAAM,EACN,MAAM,GAAG,WAAW,EACpB,MAAM,EACN,YAAY,EACZ,YAAY,GAAG,YAAY,EAC3B,MAAM,EACN,YAAY;EAEhB;0CAUqB,SACX,WACJ,YACA,UACI,YACJ,aACA,WACI,QACJ;;AAGJ,UAAO,UAAU,GAAG,QAAQ;AAC5B,UAAO,WAAW,GAAG,SAAS;AAC1B,kBAAU,UAAU;AACpB,kBAAU,WAAW;AACvB,uBAAe,AAAS,SAAA,SAAQ,QAAP,OAAO;AAChC,wBAAgB,AAAU,UAAA,SAAQ,SAAP,OAAO;AACpC,WAAO;AACL,UAAI,AAAO,OAAA,CAAC,YAAY,EAAE,aAAa,KAAK;AACpC,QAAN,MAAM,SAAa,UAAZ,YAAY,wCAAM,YAAY;AACrC,YAAI,AAAQ,OAAD,KAAI,QAAQ;AAErB;;AAEF,uBAAe,AAAS,SAAA,SAAQ,UAAP,OAAO;;AAE1B,QAAN,MAAM,SAAa,UAAZ,YAAY,wCAAM,aAAa;AACtC,YAAI,OAAO,KAAI,SAAS;AACtB,0BAAgB,AAAU,UAAA,SAAQ,UAAP,OAAO;AAClC;;AAGI,QAAN,MAAM,SAAa,UAAZ,YAAY,wCAAM,YAAY;AAC9B,QAAP,MAAM,YAAU,YAAY,EAAE,YAAY,IAAI,QAAQ,GAAG,OAAO,GAAG,SAAS,EAAE,OAAO;AACrF;;;AAIE,IAAN,MAAM,SAAa,UAAZ,YAAY,wCAAM,aAAa;AAC/B,IAAP,MAAM,YAAU,YAAY,EAAE,YAAY,IAAI,SAAS,GAAG,OAAO,GAAG,UAAU,EAAE,OAAO;EACzF;;MA3OU,4BAAgB","file":"../../../../../../../packages/flutter/src/foundation/collections.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__collections: collections
  };
}));

//# sourceMappingURL=collections.dart.lib.js.map
